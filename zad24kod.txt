<html>
<head>
</head>
<body>

<h2> Rodzaje „filozofii-paradygmatów” programowania: </h2>
<p>1)Programowanie strukturalne
</p><p>2)Programowanie obiektowe
</p><p>=======================================================================
</p><p>Programowanie strukturalne – paradygmat programowania opierający się na podziale kodu
</p><p>źródłowego programu na procedury i hierarchicznie ułożone bloki z wykorzystaniem struktur
</p><p>kontrolnych w postaci instrukcji wyboru i pętli.
</p><p>Programowanie strukturalne zwiększa czytelność i ułatwia analizę programów, co stanowi znaczącą
</p><p>poprawę w stosunku do trudnego w utrzymaniu „spaghetti code” często wynikającego z użycia
</p><p>instrukcji goto.
</p><p>Założenia programowania strukturalnego
</p><p>1. Podzielone bloki kodu mają jeden punkt wejścia (mogą mieć wiele punktów wyjścia),
</p><p>2. Wykonywanie wyrażeń w określonej kolejności,
</p><p>3. Używanie instrukcji warunkowych (if, if else),
</p><p>4. Używanie pętli (for, while, do while),
</p><p>5. Unikanie instrukcji skoku (goto),
</p><p>6. Unikanie instrukcji break, continua,
</p><p>7. W programowaniu proceduralnym (strukturalne) funkcje i zmienne opisujące dany przedmiot
</p><p>nie są ze sobą powiązane.
</p><p>=======================================================================
</p><p><h3>Opis programowania obiektowego</h3>
</p><p>Krótki opis.
</p><p>Programowanie obiektowe jest to podejście bardziej naturalne dla ludzi, bardziej zgodne z
</p><p>rzeczywistością. W pamięci komputera tworzona jest wirtualna rzeczywistość. Definiowane
</p><p>(powoływane są do wirtualnego życia w pamięci komputera) obiekty na podstawie wcześniej
</p><p>zdefiniowanych klas. Obiekty mają zdefiniowane metody oraz pola.
</p><p>Programowanie obiektowe definicja:
</p><p>Programowanie obiektowe (ang. object-oriented programming) — sposób programowania, w
</p><p>którym programy definiuje się za pomocą:
</p><p>- obiektów (obiekty powoływane są do życia wirtualnego przez programistę, mogą być kasowane
</p><p>przez programistę) np. okienka w Windowsokienko jest obiektem,
</p><p>- obiekt ma jakiś stan (czyli dane, w programowaniu obiektowym nazywane najczęściej polami) np.
</p><p>wielość okienka w Windows,
</p><p>- obiekt wykazuje pewne zachowanie (czyli posiada pewne procedury w programowaniu
</p><p>obiektowym nazywane metody). Np. jest zdefiniowana metoda do zmiany wielkości okienka.
</p><p>Czyli obiektowy program komputerowy wyrażony jest jako zbiór takich obiektów,
</p><p>komunikujących się pomiędzy sobą w celu wykonywania zadań.
</p><p>Dlaczego stosujemy programowanie obiektowe:
</p><p>- Jest to bardziej naturalne podejście przez programistę podczas tworzenia programów ponieważ
</p><p>otaczający nas świat to różnego rodzaju przedmioty. Tworząc program komputerowy dokonujemy
</p><p>pewnego ich odwzorowania rzeczywistości np. definiujemy obiekt samochód. Definiujemy pola
</p><p>czyli jego stan np. rok produkcji, marka, kolor. Definiujemy również metody czyli co umie np.
</p><p>hamowanie, przyśpieszanie. Definicja obiektu jego metod i pól znajduje się w klasie. Następnie na
</p><p>podstawie zdefiniowanego obiektu (może mieć pola oraz metody) powołujemy obiekt w pamięci
</p><p>wirtualnej
</p><p>- Programowanie obiektowe pozwala na lepsze gospodarowanie pamięciom komputera, ponieważ
</p><p>gdy obiekt staje się zbędny możemy go usunąć co zwolni pamięć zajmowaną przez ten obiekt. W
</p><p>programowaniu strukturalnym aby zwalniać pamięć konieczne było stosowanie dynamicznych
</p><p>struktur danych np. stos czy kolejka.
</p><p>- W programowaniu obiektowym dobrze napisana i przetestowana klasa pozwala na stosowaniu
</p><p>przez innych programistów. Zaoszczędza to czas i środki pieniężne.
</p><p>W przypadku programowania zorientowanego na obiekt (programowania obiektowego)
</p><p>dokonuje się powiązania metod (funkcji programu) z danymi (zmiennymi) definiującymi przedmiot.
</p><p>Wszystko to grupuje się w tzw. klasie zawierającej zarówno dane (pola) definiowanego przedmiotu,
</p><p>jak i funkcje (metody). W ten sposób definicje przedmiotu i jego właściwości znajdują się w jednym
</p><p>miejscu programu. W języku JavaScript, opis klasy jest dokonywany za pomocą pól (zmienne) i
</p><p>metod(funkcje).
</p><p>Terminologia (podsumowanie)
</p><p>Klasa (ang. "class")
</p><p> Klasa rodzaj foremki, która opisuje nam jak będą wyglądać tworzone na jej podstawie nowe
</p><p>obiekty. Klasa jest to złożony typ będący opisem (definicją) obiektu/obiektów wraz z definicją pól i
</p><p>metod obiektów.
</p><p>Obiekt (ang. "object")
</p><p> Instancja (byt, twór) który powstał na podstawie klasy. Czyli Obiekty są konstrukcjami
</p><p>programistycznymi mającymi tak zwane właściwości (inaczej pola obiektu), którymi mogą być
</p><p>zmienne lub inne obiekty. Z obiektami powiązane są funkcje wykonujące operacje na ich
</p><p>właściwościach, nazywane metodami.
</p><p>Właściwość (ang. "property")
</p><p> Własność obiektu, np. kolor.
</p><p>Metoda (ang. "method")
</p><p> Zdolność (czynność) którą umie wykonywać obiekt, np. chodzenie (idź). Realizowane w postaci
</p><p>konstrukcji podobnej do funkcji.
</p><p>Konstruktor (ang. "constructor")
</p><p> Metoda wywoływana w momencie inicjalizacji obiektu. np. tworzymy obiekt a wraz z tworzeniem
</p><p>obiektu uruchomi się metoda, która nada np. Imię i Nazwisko.
</p><p>Destruktor (ang. "descructor "jest wywoływany automatycznie podczas niszczenia obiektów. Nie
</p><p>przyjmuje żadnych argumentów. W przeciwieństwie do konstruktorów, w klasie może być tylko
</p><p>jeden destruktor.
</p><p>Dziedziczenie (ang. "inheritance")
</p><p> Klasa może dziedziczyć własności od innej klasy. Tworzymy klasę na podstawie innej klasy
</p><p>pobierając od „rodzica” właściwości i metody, może dopisać nowe pola i nowe metody.
</p><p>Hermetyzacja (lub enkapsulacja - ang. "encapsulation")
</p><p>Wewnątrz ciała klasy znajdują się pola i metody. Część pól i metod można odpowiednio ukryć przed
</p><p>"zewnętrznym światem" klasy tak jak to ma miejsce z przedmiotami ze świata rzeczywistego.
</p><p>Polimorfizm (ang. "polymorphism")
</p><p> Polimorfizm czyli wielopastaciowość. Oznacza to, że dany obiekt może zmieniać swoją postać w
</p><p>zależności od potrzeb. Może to być realizowane w formie metody wywoływanej z różną ilością
</p><p>parametrów. Tak więc utorzony obiekt może być traktowany polimorficznie bo zachowuje się różnie
</p><p>w zależności od sposobu uruchamiania jego metody.

</body>
</html>